.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_min_qif_simulation.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_min_qif_simulation.py:


QIF Simulation
===============

In this example, we load a model from the :code:`model_templates` module, simulate its behavior and plot the resulting
time series. The model represents the macroscopic dynamics of a population of quadratic integrate-and-fire (QIF) neurons
and we record the average firing rate of the population.

The model equations are given by:

.. math::

    \tau \dot r = \frac{\Delta}{\pi\tau} + 2 r v, 

    \tau \dot v = v^2 +\bar\eta + I(t) + J r \tau - (\pi r \tau)^2.

where :math:`r` is the average firing rate and :math:`v` is the average membrane potential of the QIF population [1]_.

References
----------

.. [1] Montbri√≥ et al. (2015) Phys Rev X.

Step 1: Importing the frontend class for defining models
--------------------------------------------------------

As a first step, we import the :code:`pyrates.frontend.CircuitTemplate` class, which allows us to set up a model
definition in PyRates.


.. code-block:: default


    from pyrates.frontend import CircuitTemplate


Step 2: Loading a model template from the `model_templates` library
-------------------------------------------------------------------

In the second step, we load one of the model templates that comes with PyRates via the :code:`from_yaml()` method of
the :code:`CircuitTemplate`. This method returns a :code:`CircuitTemplate` instance which provides the method
:code:`apply()` for turning it into a graph-based representation, i.e. a :code:`pyrates.ir.CircuitIR` instance.
These are the basic steps you perform, if you want to load a model that is defined inside a yaml file.
To check out the different model templates provided by PyRates, have a look at the :code:`PyRates.model_templates`
module.


.. code-block:: default


    circuit = CircuitTemplate.from_yaml("model_templates.montbrio.simple_montbrio.Net1").apply()


Step 3: Loading the model into the backend
------------------------------------------

In this example, we directly load the :code:`CircuitIR` instance into the backend via the  :code:`compile()` method
without any further changes to the graph. This way, a :code:`pyrates.backend.NumpyBackend` instance is created.
After this step, structural modifications of the network are not possible anymore.


.. code-block:: default


    compute_graph = circuit.compile(backend='numpy', step_size=1e-3)


Step 4: Numerical simulation of a the model behavior in time
------------------------------------------------------------

After loading the model into the backend, numerical simulations can be performed via the :code:`run()` method.
Calling this function will solve the initial value problem of the above defined differential equations for a time
interval from 0 to the given simulation time.
This solution will be calculated numerically by a differential equation solver in the backend, starting with a defined
step-size.


.. code-block:: default


    results = compute_graph.run(simulation_time=40.0, outputs={'r': 'Pop1/Op_e/r'})


Step 5: Visualization of the solution
-------------------------------------

The output of the :code:`run()` method is a :code:`pandas.Dataframe`, which comes with a :code:`plot()` method for
plotting the timeseries it contains.
This timeseries represents the numerical solution of the initial value problem solved in step 4 with respect to the
state variable :math:`r` of the model.


.. code-block:: default


    results.plot()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_min_qif_simulation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: qif_simulation.py <qif_simulation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: qif_simulation.ipynb <qif_simulation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
